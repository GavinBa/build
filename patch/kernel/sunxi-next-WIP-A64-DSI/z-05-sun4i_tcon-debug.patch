diff --git a/drivers/gpu/drm/sun4i/sun4i_tcon.c b/drivers/gpu/drm/sun4i/sun4i_tcon.c
index c78cd35a1..1e252f910 100644
--- a/drivers/gpu/drm/sun4i/sun4i_tcon.c
+++ b/drivers/gpu/drm/sun4i/sun4i_tcon.c
@@ -29,6 +29,7 @@
 #include <linux/of_irq.h>
 #include <linux/regmap.h>
 #include <linux/reset.h>
+#include <linux/printk.h>
 
 #include "sun4i_crtc.h"
 #include "sun4i_dotclock.h"
@@ -745,6 +746,7 @@ static irqreturn_t sun4i_tcon_handler(int irq, void *private)
 static int sun4i_tcon_init_clocks(struct device *dev,
 				  struct sun4i_tcon *tcon)
 {
+	printk("DEBUG - sun4i_tcon_init_clocks - Entering.\n");
 	tcon->clk = devm_clk_get(dev, "ahb");
 	if (IS_ERR(tcon->clk)) {
 		dev_err(dev, "Couldn't get the TCON bus clock\n");
@@ -767,7 +769,7 @@ static int sun4i_tcon_init_clocks(struct device *dev,
 			return PTR_ERR(tcon->sclk1);
 		}
 	}
-
+	printk("DEBUG - sun4i_tcon_init_clocks - Exiting.\n");
 	return 0;
 }
 
@@ -779,6 +781,7 @@ static void sun4i_tcon_free_clocks(struct sun4i_tcon *tcon)
 static int sun4i_tcon_init_irq(struct device *dev,
 			       struct sun4i_tcon *tcon)
 {
+	printk("DEBUG - sun4i_tcon_init_irq - Entering\n");
 	struct platform_device *pdev = to_platform_device(dev);
 	int irq, ret;
 
@@ -794,7 +797,7 @@ static int sun4i_tcon_init_irq(struct device *dev,
 		dev_err(dev, "Couldn't request the IRQ\n");
 		return ret;
 	}
-
+	printk("DEBUG - sun4i_tcon_init_irq - Exiting\n");
 	return 0;
 }
 
@@ -812,6 +815,7 @@ static int sun4i_tcon_init_regmap(struct device *dev,
 	struct resource *res;
 	void __iomem *regs;
 
+	printk("DEBUG - sun4i_tcon_init_regmap - Entering\n");
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	regs = devm_ioremap_resource(dev, res);
 	if (IS_ERR(regs))
@@ -833,6 +837,7 @@ static int sun4i_tcon_init_regmap(struct device *dev,
 	regmap_write(tcon->regs, SUN4I_TCON0_IO_TRI_REG, ~0);
 	regmap_write(tcon->regs, SUN4I_TCON1_IO_TRI_REG, ~0);
 
+	printk("DEBUG - sun4i_tcon_init_regmap - Exiting\n");
 	return 0;
 }
 
@@ -1089,6 +1094,7 @@ static int sun4i_tcon_bind(struct device *dev, struct device *master,
 	bool has_lvds_rst, has_lvds_alt, can_lvds;
 	int ret;
 
+	printk("DEBUG - sun4i_tcon_bind - Entering\n");
 	engine = sun4i_tcon_find_engine(drv, dev->of_node);
 	if (IS_ERR(engine)) {
 		dev_err(dev, "Couldn't find matching engine\n");
@@ -1223,11 +1229,18 @@ static int sun4i_tcon_bind(struct device *dev, struct device *master,
 		 * we used to.
 		 */
 		remote = of_graph_get_remote_node(dev->of_node, 1, 0);
+		printk("DEBUG - panel-lvds - checking compatible\n");
 		if (of_device_is_compatible(remote, "panel-lvds"))
 			if (can_lvds)
+			{
 				ret = sun4i_lvds_init(drm, tcon);
+				printk("DEBUG - panel-lvds - ret = %d\n",ret);
+			}
 			else
-				ret = -EINVAL;
+			{
+				ret = -EINVAL;	
+				printk("DEBUG - panel-lvds - ret = -EINVAL %d\n",ret);
+			}
 		else
 			ret = sun4i_rgb_init(drm, tcon);
 		of_node_put(remote);
@@ -1236,7 +1249,9 @@ static int sun4i_tcon_bind(struct device *dev, struct device *master,
 			goto err_free_dotclock;
 	}
 
+	printk("DEBUG - quirks - checking\n");
 	if (tcon->quirks->needs_de_be_mux) {
+		printk("DEBUG - Doing quirks\n");
 		/*
 		 * We assume there is no dynamic muxing of backends
 		 * and TCONs, so we select the backend with same ID.
@@ -1256,15 +1271,18 @@ static int sun4i_tcon_bind(struct device *dev, struct device *master,
 	}
 
 	list_add_tail(&tcon->list, &drv->tcon_list);
-
+	printk("DEBUG - sun4i_tcon_bind - Exiting\n");
 	return 0;
 
 err_free_dotclock:
+	printk("DEBUG - sun4i_tcon_bind - ERR - err_free_dotclock\n");
 	if (tcon->quirks->has_channel_0)
 		sun4i_dclk_free(tcon);
 err_free_clocks:
+	printk("DEBUG - sun4i_tcon_bind - ERR - err_free_clocks\n");
 	sun4i_tcon_free_clocks(tcon);
 err_assert_reset:
+	printk("DEBUG - sun4i_tcon_bind - ERR - err_assert_reset\n");
 	reset_control_assert(tcon->lcd_rst);
 	return ret;
 }
