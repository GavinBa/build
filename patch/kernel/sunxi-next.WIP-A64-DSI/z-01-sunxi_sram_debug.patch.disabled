diff --git a/drivers/soc/sunxi/sunxi_sram.c b/drivers/soc/sunxi/sunxi_sram.c
index b4b0f3480..3a6802519 100644
--- a/drivers/soc/sunxi/sunxi_sram.c
+++ b/drivers/soc/sunxi/sunxi_sram.c
@@ -18,6 +18,7 @@
 #include <linux/of_device.h>
 #include <linux/platform_device.h>
 #include <linux/regmap.h>
+#include <linux/printk.h>
 
 #include <linux/soc/sunxi/sunxi_sram.h>
 
@@ -235,18 +236,32 @@ int sunxi_sram_claim(struct device *dev)
 	unsigned int device;
 	u32 val, mask;
 
+	printk("DEBUG - Entered sunxi_sram_claim\n");
+	printk("DEBUG - base = %u\n",base);
 	if (IS_ERR(base))
+	{
+		printk("DEBUG - IS_ERR Failed\n");
 		return PTR_ERR(base);
+	}
 
 	if (!base)
+	{
+		printk("DEBUG - EPROBE_DEFER\n");
 		return -EPROBE_DEFER;
+	}
 
 	if (!dev || !dev->of_node)
+	{
+		printk("DEBUG - EINVAL\n");
 		return -EINVAL;
+	}
 
 	sram_data = sunxi_sram_of_parse(dev->of_node, &device);
 	if (IS_ERR(sram_data))
+	{
+		printk("DEBUG - Sram_data failed\n");
 		return PTR_ERR(sram_data);
+	}
 
 	sram_desc = to_sram_desc(sram_data);
 
@@ -254,6 +269,7 @@ int sunxi_sram_claim(struct device *dev)
 
 	if (sram_desc->claimed) {
 		spin_unlock(&sram_lock);
+		printk("DEBUG - Couldn't Spinlock\n");
 		return -EBUSY;
 	}
 
@@ -266,6 +282,7 @@ int sunxi_sram_claim(struct device *dev)
 
 	spin_unlock(&sram_lock);
 
+	printk("DEBUG - Exiting sunxi_sram_claim\n");
 	return 0;
 }
 EXPORT_SYMBOL(sunxi_sram_claim);
@@ -331,32 +348,46 @@ static int sunxi_sram_probe(struct platform_device *pdev)
 	struct regmap *emac_clock;
 	const struct sunxi_sramc_variant *variant;
 
+	printk("DEBUG - Entering sunxi_sram_probe\n");
 	sram_dev = &pdev->dev;
 
 	variant = of_device_get_match_data(&pdev->dev);
 	if (!variant)
+	{
+		printk("DEBUG - EINVAL\n");
 		return -EINVAL;
+	}
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	base = devm_ioremap_resource(&pdev->dev, res);
 	if (IS_ERR(base))
+	{
+		printk("DEBUG - IS_ERR(base)\n");
 		return PTR_ERR(base);
+	}
 
 	of_platform_populate(pdev->dev.of_node, NULL, NULL, &pdev->dev);
 
 	d = debugfs_create_file("sram", S_IRUGO, NULL, NULL,
 				&sunxi_sram_fops);
 	if (!d)
+	{
+		printk("DEBUG - ENOMEM\n");
 		return -ENOMEM;
+	}
 
 	if (variant->has_emac_clock) {
 		emac_clock = devm_regmap_init_mmio(&pdev->dev, base,
 						   &sunxi_sram_emac_clock_regmap);
 
-		if (IS_ERR(emac_clock))
+		if (IS_ERR(emac_clock))	
+		{
+			printk("DEBUG - IS_ERR(ema_clock)\n");
 			return PTR_ERR(emac_clock);
+		}
 	}
 
+	printk("DEBUG - Exiting sunxi_sram_probe\n");
 	return 0;
 }
 
