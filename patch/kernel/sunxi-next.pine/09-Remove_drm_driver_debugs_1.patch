diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index 22873c7ac..c8171c39b 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -200,13 +200,10 @@ int drm_connector_init(struct drm_device *dev,
 	struct ida *connector_ida =
 		&drm_connector_enum_list[connector_type].ida;
 
-	printk("0.0 %s\n", __func__);
-	printk("0. %d-%d-%d %s\n", __func__, drm_drv_uses_atomic_modeset(dev), !funcs->atomic_destroy_state, !funcs->atomic_duplicate_state);
 	WARN_ON(drm_drv_uses_atomic_modeset(dev) &&
 		(!funcs->atomic_destroy_state ||
 		 !funcs->atomic_duplicate_state));
 
-	printk("0.1 %s\n", __func__);
 	ret = __drm_mode_object_add(dev, &connector->base,
 				    DRM_MODE_OBJECT_CONNECTOR,
 				    false, drm_connector_free);
@@ -215,12 +212,10 @@ int drm_connector_init(struct drm_device *dev,
 		return ret;
 	}
 
-	printk("0.2 %s\n", __func__);
 	connector->base.properties = &connector->properties;
 	connector->dev = dev;
 	connector->funcs = funcs;
 
-	printk("1. %s\n", __func__);
 	/* connector index is used with 32bit bitmasks */
 	ret = ida_simple_get(&config->connector_ida, 0, 32, GFP_KERNEL);
 	if (ret < 0) {
@@ -233,7 +228,6 @@ int drm_connector_init(struct drm_device *dev,
 	connector->index = ret;
 	ret = 0;
 
-	printk("2. %s\n", __func__);
 	connector->connector_type = connector_type;
 	connector->connector_type_id =
 		ida_simple_get(connector_ida, 1, 0, GFP_KERNEL);
@@ -250,7 +244,6 @@ int drm_connector_init(struct drm_device *dev,
 		goto out_put_type_id;
 	}
 
-	printk("%s: connector name = %s\n", __func__, connector->name);
 	INIT_LIST_HEAD(&connector->probed_modes);
 	INIT_LIST_HEAD(&connector->modes);
 	mutex_init(&connector->mutex);
diff --git a/drivers/gpu/drm/sun4i/sun4i_dotclock.c b/drivers/gpu/drm/sun4i/sun4i_dotclock.c
index 61a9cb282..2a15f2f92 100644
--- a/drivers/gpu/drm/sun4i/sun4i_dotclock.c
+++ b/drivers/gpu/drm/sun4i/sun4i_dotclock.c
@@ -68,7 +68,6 @@ static unsigned long sun4i_dclk_recalc_rate(struct clk_hw *hw,
 	if (!val)
 		val = 1;
 
-	printk("%s: val = %d, rate = %d\n", __func__, val, (parent_rate / val));
 	return parent_rate / val;
 }
 
@@ -81,7 +80,6 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 	u8 best_div = 1;
 	int i;
 
-	printk("%s: min_div = %d max_div = %d, rate = %d\n", __func__, tcon->dclk_min_div, tcon->dclk_max_div, rate);
 	for (i = tcon->dclk_min_div; i <= tcon->dclk_max_div; i++) {
 		u64 ideal = (u64)rate * i;
 		unsigned long rounded;
@@ -99,7 +97,6 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 		rounded = clk_hw_round_rate(clk_hw_get_parent(hw),
 					    ideal);
 
-		printk("ideal = %d, rounded = %d\n", ideal, rounded);
 		if (rounded == ideal) {
 			best_parent = rounded;
 			best_div = i;
@@ -116,7 +113,6 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 out:
 	*parent_rate = best_parent;
 
-	printk("%s: div = %d rate = %d\n", __func__, best_div, (best_parent / best_div));
 	return best_parent / best_div;
 }
 
@@ -126,7 +122,6 @@ static int sun4i_dclk_set_rate(struct clk_hw *hw, unsigned long rate,
 	struct sun4i_dclk *dclk = hw_to_dclk(hw);
 	u8 div = parent_rate / rate;
 
-	printk("%s div %d\n", __func__, div);
 	return regmap_update_bits(dclk->regmap, SUN4I_TCON0_DCLK_REG,
 				  GENMASK(6, 0), div);
 }
