diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index 22873c7ac..dee6ebafe 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -201,7 +201,7 @@ int drm_connector_init(struct drm_device *dev,
 		&drm_connector_enum_list[connector_type].ida;
 
 	printk("0.0 %s\n", __func__);
-	printk("0. %d-%d-%d %s\n", __func__, drm_drv_uses_atomic_modeset(dev), !funcs->atomic_destroy_state, !funcs->atomic_duplicate_state);
+	printk("0. %s-%d-%d %d\n", __func__, drm_drv_uses_atomic_modeset(dev), !funcs->atomic_destroy_state, !funcs->atomic_duplicate_state);
 	WARN_ON(drm_drv_uses_atomic_modeset(dev) &&
 		(!funcs->atomic_destroy_state ||
 		 !funcs->atomic_duplicate_state));
diff --git a/drivers/gpu/drm/sun4i/sun4i_dotclock.c b/drivers/gpu/drm/sun4i/sun4i_dotclock.c
index 61a9cb282..3d0638a3d 100644
--- a/drivers/gpu/drm/sun4i/sun4i_dotclock.c
+++ b/drivers/gpu/drm/sun4i/sun4i_dotclock.c
@@ -68,7 +68,7 @@ static unsigned long sun4i_dclk_recalc_rate(struct clk_hw *hw,
 	if (!val)
 		val = 1;
 
-	printk("%s: val = %d, rate = %d\n", __func__, val, (parent_rate / val));
+	printk("%s: val = %d, rate = %ld\n", __func__, val, (parent_rate / val));
 	return parent_rate / val;
 }
 
@@ -81,7 +81,7 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 	u8 best_div = 1;
 	int i;
 
-	printk("%s: min_div = %d max_div = %d, rate = %d\n", __func__, tcon->dclk_min_div, tcon->dclk_max_div, rate);
+	printk("%s: min_div = %d max_div = %d, rate = %ld\n", __func__, tcon->dclk_min_div, tcon->dclk_max_div, rate);
 	for (i = tcon->dclk_min_div; i <= tcon->dclk_max_div; i++) {
 		u64 ideal = (u64)rate * i;
 		unsigned long rounded;
@@ -99,7 +99,7 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 		rounded = clk_hw_round_rate(clk_hw_get_parent(hw),
 					    ideal);
 
-		printk("ideal = %d, rounded = %d\n", ideal, rounded);
+		printk("ideal = %lld, rounded = %d\n", ideal, rounded);
 		if (rounded == ideal) {
 			best_parent = rounded;
 			best_div = i;
@@ -116,7 +116,7 @@ static long sun4i_dclk_round_rate(struct clk_hw *hw, unsigned long rate,
 out:
 	*parent_rate = best_parent;
 
-	printk("%s: div = %d rate = %d\n", __func__, best_div, (best_parent / best_div));
+	printk("%s: div = %d rate = %ld\n", __func__, best_div, (best_parent / best_div));
 	return best_parent / best_div;
 }
 
