diff --git a/drivers/i2c/busses/i2c-gpio.c b/drivers/i2c/busses/i2c-gpio.c
index 9684a0ac2..0ef8fcc6a 100644
--- a/drivers/i2c/busses/i2c-gpio.c
+++ b/drivers/i2c/busses/i2c-gpio.c
@@ -7,34 +7,34 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-#include <linux/completion.h>
-#include <linux/debugfs.h>
-#include <linux/delay.h>
-#include <linux/gpio/consumer.h>
-#include <linux/i2c-algo-bit.h>
 #include <linux/i2c.h>
+#include <linux/i2c-algo-bit.h>
+#include <linux/i2c-gpio.h>
 #include <linux/init.h>
-#include <linux/interrupt.h>
 #include <linux/module.h>
-#include <linux/of.h>
-#include <linux/platform_data/i2c-gpio.h>
-#include <linux/platform_device.h>
 #include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
 
 struct i2c_gpio_private_data {
-	struct gpio_desc *sda;
-	struct gpio_desc *scl;
 	struct i2c_adapter adap;
 	struct i2c_algo_bit_data bit_data;
 	struct i2c_gpio_platform_data pdata;
-#ifdef CONFIG_I2C_GPIO_FAULT_INJECTOR
-	struct dentry *debug_dir;
-	/* these must be protected by bus lock */
-	struct completion scl_irq_completion;
-	u64 scl_irq_data;
-#endif
 };
 
+/* Toggle SDA by changing the direction of the pin */
+static void i2c_gpio_setsda_dir(void *data, int state)
+{
+	struct i2c_gpio_platform_data *pdata = data;
+
+	if (state)
+		gpio_direction_input(pdata->sda_pin);
+	else
+		gpio_direction_output(pdata->sda_pin, 0);
+}
+
 /*
  * Toggle SDA by changing the output value of the pin. This is only
  * valid for pins configured as open drain (i.e. setting the value
@@ -42,9 +42,20 @@ struct i2c_gpio_private_data {
  */
 static void i2c_gpio_setsda_val(void *data, int state)
 {
-	struct i2c_gpio_private_data *priv = data;
+	struct i2c_gpio_platform_data *pdata = data;
 
-	gpiod_set_value_cansleep(priv->sda, state);
+	gpio_set_value(pdata->sda_pin, state);
+}
+
+/* Toggle SCL by changing the direction of the pin. */
+static void i2c_gpio_setscl_dir(void *data, int state)
+{
+	struct i2c_gpio_platform_data *pdata = data;
+
+	if (state)
+		gpio_direction_input(pdata->scl_pin);
+	else
+		gpio_direction_output(pdata->scl_pin, 0);
 }
 
 /*
@@ -55,253 +66,45 @@ static void i2c_gpio_setsda_val(void *data, int state)
  */
 static void i2c_gpio_setscl_val(void *data, int state)
 {
-	struct i2c_gpio_private_data *priv = data;
+	struct i2c_gpio_platform_data *pdata = data;
 
-	gpiod_set_value_cansleep(priv->scl, state);
+	gpio_set_value(pdata->scl_pin, state);
 }
 
 static int i2c_gpio_getsda(void *data)
 {
-	struct i2c_gpio_private_data *priv = data;
+	struct i2c_gpio_platform_data *pdata = data;
 
-	return gpiod_get_value_cansleep(priv->sda);
+	return gpio_get_value(pdata->sda_pin);
 }
 
 static int i2c_gpio_getscl(void *data)
 {
-	struct i2c_gpio_private_data *priv = data;
-
-	return gpiod_get_value_cansleep(priv->scl);
-}
-
-#ifdef CONFIG_I2C_GPIO_FAULT_INJECTOR
-static struct dentry *i2c_gpio_debug_dir;
-
-#define setsda(bd, val)	((bd)->setsda((bd)->data, val))
-#define setscl(bd, val)	((bd)->setscl((bd)->data, val))
-#define getsda(bd)	((bd)->getsda((bd)->data))
-#define getscl(bd)	((bd)->getscl((bd)->data))
-
-#define WIRE_ATTRIBUTE(wire) \
-static int fops_##wire##_get(void *data, u64 *val)		\
-{								\
-	struct i2c_gpio_private_data *priv = data;		\
-								\
-	i2c_lock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);	\
-	*val = get##wire(&priv->bit_data);			\
-	i2c_unlock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);	\
-	return 0;						\
-}								\
-static int fops_##wire##_set(void *data, u64 val)		\
-{								\
-	struct i2c_gpio_private_data *priv = data;		\
-								\
-	i2c_lock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);	\
-	set##wire(&priv->bit_data, val);			\
-	i2c_unlock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);	\
-	return 0;						\
-}								\
-DEFINE_DEBUGFS_ATTRIBUTE(fops_##wire, fops_##wire##_get, fops_##wire##_set, "%llu\n")
-
-WIRE_ATTRIBUTE(scl);
-WIRE_ATTRIBUTE(sda);
-
-static void i2c_gpio_incomplete_transfer(struct i2c_gpio_private_data *priv,
-					u32 pattern, u8 pattern_size)
-{
-	struct i2c_algo_bit_data *bit_data = &priv->bit_data;
-	int i;
-
-	i2c_lock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);
-
-	/* START condition */
-	setsda(bit_data, 0);
-	udelay(bit_data->udelay);
-
-	/* Send pattern, request ACK, don't send STOP */
-	for (i = pattern_size - 1; i >= 0; i--) {
-		setscl(bit_data, 0);
-		udelay(bit_data->udelay / 2);
-		setsda(bit_data, (pattern >> i) & 1);
-		udelay((bit_data->udelay + 1) / 2);
-		setscl(bit_data, 1);
-		udelay(bit_data->udelay);
-	}
-
-	i2c_unlock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);
-}
-
-static int fops_incomplete_addr_phase_set(void *data, u64 addr)
-{
-	struct i2c_gpio_private_data *priv = data;
-	u32 pattern;
-
-	if (addr > 0x7f)
-		return -EINVAL;
-
-	/* ADDR (7 bit) + RD (1 bit) + Client ACK, keep SDA hi (1 bit) */
-	pattern = (addr << 2) | 3;
-
-	i2c_gpio_incomplete_transfer(priv, pattern, 9);
-
-	return 0;
-}
-DEFINE_DEBUGFS_ATTRIBUTE(fops_incomplete_addr_phase, NULL, fops_incomplete_addr_phase_set, "%llu\n");
-
-static int fops_incomplete_write_byte_set(void *data, u64 addr)
-{
-	struct i2c_gpio_private_data *priv = data;
-	u32 pattern;
+	struct i2c_gpio_platform_data *pdata = data;
 
-	if (addr > 0x7f)
-		return -EINVAL;
-
-	/* ADDR (7 bit) + WR (1 bit) + Client ACK (1 bit) */
-	pattern = (addr << 2) | 1;
-	/* 0x00 (8 bit) + Client ACK, keep SDA hi (1 bit) */
-	pattern = (pattern << 9) | 1;
-
-	i2c_gpio_incomplete_transfer(priv, pattern, 18);
-
-	return 0;
+	return gpio_get_value(pdata->scl_pin);
 }
-DEFINE_DEBUGFS_ATTRIBUTE(fops_incomplete_write_byte, NULL, fops_incomplete_write_byte_set, "%llu\n");
 
-static int i2c_gpio_fi_act_on_scl_irq(struct i2c_gpio_private_data *priv,
-				       irqreturn_t handler(int, void*))
+static int of_i2c_gpio_get_pins(struct device_node *np,
+				unsigned int *sda_pin, unsigned int *scl_pin)
 {
-	int ret, irq = gpiod_to_irq(priv->scl);
+	if (of_gpio_count(np) < 2)
+		return -ENODEV;
 
-	if (irq < 0)
-		return irq;
-
-	i2c_lock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);
-
-	ret = gpiod_direction_input(priv->scl);
-	if (ret)
-		goto unlock;
+	*sda_pin = of_get_gpio(np, 0);
+	*scl_pin = of_get_gpio(np, 1);
 
-	reinit_completion(&priv->scl_irq_completion);
-
-	ret = request_irq(irq, handler, IRQF_TRIGGER_FALLING,
-			  "i2c_gpio_fault_injector_scl_irq", priv);
-	if (ret)
-		goto output;
-
-	wait_for_completion_interruptible(&priv->scl_irq_completion);
-
-	free_irq(irq, priv);
- output:
-	ret = gpiod_direction_output(priv->scl, 1) ?: ret;
- unlock:
-	i2c_unlock_bus(&priv->adap, I2C_LOCK_ROOT_ADAPTER);
-
-	return ret;
-}
-
-static irqreturn_t lose_arbitration_irq(int irq, void *dev_id)
-{
-	struct i2c_gpio_private_data *priv = dev_id;
-
-	setsda(&priv->bit_data, 0);
-	udelay(priv->scl_irq_data);
-	setsda(&priv->bit_data, 1);
-
-	complete(&priv->scl_irq_completion);
-
-	return IRQ_HANDLED;
-}
+	if (*sda_pin == -EPROBE_DEFER || *scl_pin == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
 
-static int fops_lose_arbitration_set(void *data, u64 duration)
-{
-	struct i2c_gpio_private_data *priv = data;
-
-	if (duration > 100 * 1000)
-		return -EINVAL;
-
-	priv->scl_irq_data = duration;
-	/*
-	 * Interrupt on falling SCL. This ensures that the master under test has
-	 * really started the transfer. Interrupt on falling SDA did only
-	 * exercise 'bus busy' detection on some HW but not 'arbitration lost'.
-	 * Note that the interrupt latency may cause the first bits to be
-	 * transmitted correctly.
-	 */
-	return i2c_gpio_fi_act_on_scl_irq(priv, lose_arbitration_irq);
-}
-DEFINE_DEBUGFS_ATTRIBUTE(fops_lose_arbitration, NULL, fops_lose_arbitration_set, "%llu\n");
-
-static irqreturn_t inject_panic_irq(int irq, void *dev_id)
-{
-	struct i2c_gpio_private_data *priv = dev_id;
-
-	udelay(priv->scl_irq_data);
-	panic("I2C fault injector induced panic");
-
-	return IRQ_HANDLED;
-}
-
-static int fops_inject_panic_set(void *data, u64 duration)
-{
-	struct i2c_gpio_private_data *priv = data;
-
-	if (duration > 100 * 1000)
-		return -EINVAL;
-
-	priv->scl_irq_data = duration;
-	/*
-	 * Interrupt on falling SCL. This ensures that the master under test has
-	 * really started the transfer.
-	 */
-	return i2c_gpio_fi_act_on_scl_irq(priv, inject_panic_irq);
-}
-DEFINE_DEBUGFS_ATTRIBUTE(fops_inject_panic, NULL, fops_inject_panic_set, "%llu\n");
-
-static void i2c_gpio_fault_injector_init(struct platform_device *pdev)
-{
-	struct i2c_gpio_private_data *priv = platform_get_drvdata(pdev);
-
-	/*
-	 * If there will be a debugfs-dir per i2c adapter somewhen, put the
-	 * 'fault-injector' dir there. Until then, we have a global dir with
-	 * all adapters as subdirs.
-	 */
-	if (!i2c_gpio_debug_dir) {
-		i2c_gpio_debug_dir = debugfs_create_dir("i2c-fault-injector", NULL);
-		if (!i2c_gpio_debug_dir)
-			return;
+	if (!gpio_is_valid(*sda_pin) || !gpio_is_valid(*scl_pin)) {
+		pr_err("%pOF: invalid GPIO pins, sda=%d/scl=%d\n",
+		       np, *sda_pin, *scl_pin);
+		return -ENODEV;
 	}
 
-	priv->debug_dir = debugfs_create_dir(pdev->name, i2c_gpio_debug_dir);
-	if (!priv->debug_dir)
-		return;
-
-	init_completion(&priv->scl_irq_completion);
-
-	debugfs_create_file_unsafe("incomplete_address_phase", 0200, priv->debug_dir,
-				   priv, &fops_incomplete_addr_phase);
-	debugfs_create_file_unsafe("incomplete_write_byte", 0200, priv->debug_dir,
-				   priv, &fops_incomplete_write_byte);
-	if (priv->bit_data.getscl) {
-		debugfs_create_file_unsafe("inject_panic", 0200, priv->debug_dir,
-					   priv, &fops_inject_panic);
-		debugfs_create_file_unsafe("lose_arbitration", 0200, priv->debug_dir,
-					   priv, &fops_lose_arbitration);
-	}
-	debugfs_create_file_unsafe("scl", 0600, priv->debug_dir, priv, &fops_scl);
-	debugfs_create_file_unsafe("sda", 0600, priv->debug_dir, priv, &fops_sda);
-}
-
-static void i2c_gpio_fault_injector_exit(struct platform_device *pdev)
-{
-	struct i2c_gpio_private_data *priv = platform_get_drvdata(pdev);
-
-	debugfs_remove_recursive(priv->debug_dir);
+	return 0;
 }
-#else
-static inline void i2c_gpio_fault_injector_init(struct platform_device *pdev) {}
-static inline void i2c_gpio_fault_injector_exit(struct platform_device *pdev) {}
-#endif /* CONFIG_I2C_GPIO_FAULT_INJECTOR*/
 
 static void of_i2c_gpio_get_props(struct device_node *np,
 				  struct i2c_gpio_platform_data *pdata)
@@ -321,103 +124,72 @@ static void of_i2c_gpio_get_props(struct device_node *np,
 		of_property_read_bool(np, "i2c-gpio,scl-output-only");
 }
 
-static struct gpio_desc *i2c_gpio_get_desc(struct device *dev,
-					   const char *con_id,
-					   unsigned int index,
-					   enum gpiod_flags gflags)
-{
-	struct gpio_desc *retdesc;
-	int ret;
-
-	retdesc = devm_gpiod_get(dev, con_id, gflags);
-	if (!IS_ERR(retdesc)) {
-		dev_dbg(dev, "got GPIO from name %s\n", con_id);
-		return retdesc;
-	}
-
-	retdesc = devm_gpiod_get_index(dev, NULL, index, gflags);
-	if (!IS_ERR(retdesc)) {
-		dev_dbg(dev, "got GPIO from index %u\n", index);
-		return retdesc;
-	}
-
-	ret = PTR_ERR(retdesc);
-
-	/* FIXME: hack in the old code, is this really necessary? */
-	if (ret == -EINVAL)
-		retdesc = ERR_PTR(-EPROBE_DEFER);
-
-	/* This happens if the GPIO driver is not yet probed, let's defer */
-	if (ret == -ENOENT)
-		retdesc = ERR_PTR(-EPROBE_DEFER);
-
-	if (ret != -EPROBE_DEFER)
-		dev_err(dev, "error trying to get descriptor: %d\n", ret);
-
-	return retdesc;
-}
-
 static int i2c_gpio_probe(struct platform_device *pdev)
 {
 	struct i2c_gpio_private_data *priv;
 	struct i2c_gpio_platform_data *pdata;
 	struct i2c_algo_bit_data *bit_data;
 	struct i2c_adapter *adap;
-	struct device *dev = &pdev->dev;
-	struct device_node *np = dev->of_node;
-	enum gpiod_flags gflags;
+	unsigned int sda_pin, scl_pin;
 	int ret;
 
-	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	/* First get the GPIO pins; if it fails, we'll defer the probe. */
+	if (pdev->dev.of_node) {
+		ret = of_i2c_gpio_get_pins(pdev->dev.of_node,
+					   &sda_pin, &scl_pin);
+		if (ret)
+			return ret;
+	} else {
+		if (!dev_get_platdata(&pdev->dev))
+			return -ENXIO;
+		pdata = dev_get_platdata(&pdev->dev);
+		sda_pin = pdata->sda_pin;
+		scl_pin = pdata->scl_pin;
+	}
+
+	ret = devm_gpio_request(&pdev->dev, sda_pin, "sda");
+	if (ret) {
+		if (ret == -EINVAL)
+			ret = -EPROBE_DEFER;	/* Try again later */
+		return ret;
+	}
+	ret = devm_gpio_request(&pdev->dev, scl_pin, "scl");
+	if (ret) {
+		if (ret == -EINVAL)
+			ret = -EPROBE_DEFER;	/* Try again later */
+		return ret;
+	}
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv)
 		return -ENOMEM;
-
 	adap = &priv->adap;
 	bit_data = &priv->bit_data;
 	pdata = &priv->pdata;
 
-	if (np) {
-		of_i2c_gpio_get_props(np, pdata);
+	if (pdev->dev.of_node) {
+		pdata->sda_pin = sda_pin;
+		pdata->scl_pin = scl_pin;
+		of_i2c_gpio_get_props(pdev->dev.of_node, pdata);
 	} else {
-		/*
-		 * If all platform data settings are zero it is OK
-		 * to not provide any platform data from the board.
-		 */
-		if (dev_get_platdata(dev))
-			memcpy(pdata, dev_get_platdata(dev), sizeof(*pdata));
+		memcpy(pdata, dev_get_platdata(&pdev->dev), sizeof(*pdata));
 	}
 
-	/*
-	 * First get the GPIO pins; if it fails, we'll defer the probe.
-	 * If the SCL/SDA lines are marked "open drain" by platform data or
-	 * device tree then this means that something outside of our control is
-	 * marking these lines to be handled as open drain, and we should just
-	 * handle them as we handle any other output. Else we enforce open
-	 * drain as this is required for an I2C bus.
-	 */
-	if (pdata->sda_is_open_drain)
-		gflags = GPIOD_OUT_HIGH;
-	else
-		gflags = GPIOD_OUT_HIGH_OPEN_DRAIN;
-	priv->sda = i2c_gpio_get_desc(dev, "sda", 0, gflags);
-	if (IS_ERR(priv->sda))
-		return PTR_ERR(priv->sda);
-
-	if (pdata->scl_is_open_drain)
-		gflags = GPIOD_OUT_HIGH;
-	else
-		gflags = GPIOD_OUT_HIGH_OPEN_DRAIN;
-	priv->scl = i2c_gpio_get_desc(dev, "scl", 1, gflags);
-	if (IS_ERR(priv->scl))
-		return PTR_ERR(priv->scl);
-
-	if (gpiod_cansleep(priv->sda) || gpiod_cansleep(priv->scl))
-		dev_warn(dev, "Slow GPIO pins might wreak havoc into I2C/SMBus bus timing");
-	else
-		bit_data->can_do_atomic = true;
+	if (pdata->sda_is_open_drain) {
+		gpio_direction_output(pdata->sda_pin, 1);
+		bit_data->setsda = i2c_gpio_setsda_val;
+	} else {
+		gpio_direction_input(pdata->sda_pin);
+		bit_data->setsda = i2c_gpio_setsda_dir;
+	}
 
-	bit_data->setsda = i2c_gpio_setsda_val;
-	bit_data->setscl = i2c_gpio_setscl_val;
+	if (pdata->scl_is_open_drain || pdata->scl_is_output_only) {
+		gpio_direction_output(pdata->scl_pin, 1);
+		bit_data->setscl = i2c_gpio_setscl_val;
+	} else {
+		gpio_direction_input(pdata->scl_pin);
+		bit_data->setscl = i2c_gpio_setscl_dir;
+	}
 
 	if (!pdata->scl_is_output_only)
 		bit_data->getscl = i2c_gpio_getscl;
@@ -435,18 +207,18 @@ static int i2c_gpio_probe(struct platform_device *pdev)
 	else
 		bit_data->timeout = HZ / 10;		/* 100 ms */
 
-	bit_data->data = priv;
+	bit_data->data = pdata;
 
 	adap->owner = THIS_MODULE;
-	if (np)
-		strlcpy(adap->name, dev_name(dev), sizeof(adap->name));
+	if (pdev->dev.of_node)
+		strlcpy(adap->name, dev_name(&pdev->dev), sizeof(adap->name));
 	else
 		snprintf(adap->name, sizeof(adap->name), "i2c-gpio%d", pdev->id);
 
 	adap->algo_data = bit_data;
 	adap->class = I2C_CLASS_HWMON | I2C_CLASS_SPD;
-	adap->dev.parent = dev;
-	adap->dev.of_node = np;
+	adap->dev.parent = &pdev->dev;
+	adap->dev.of_node = pdev->dev.of_node;
 
 	adap->nr = pdev->id;
 	ret = i2c_bit_add_numbered_bus(adap);
@@ -455,18 +227,11 @@ static int i2c_gpio_probe(struct platform_device *pdev)
 
 	platform_set_drvdata(pdev, priv);
 
-	/*
-	 * FIXME: using global GPIO numbers is not helpful. If/when we
-	 * get accessors to get the actual name of the GPIO line,
-	 * from the descriptor, then provide that instead.
-	 */
-	dev_info(dev, "using lines %u (SDA) and %u (SCL%s)\n",
-		 desc_to_gpio(priv->sda), desc_to_gpio(priv->scl),
+	dev_info(&pdev->dev, "using pins %u (SDA) and %u (SCL%s)\n",
+		 pdata->sda_pin, pdata->scl_pin,
 		 pdata->scl_is_output_only
 		 ? ", no clock stretching" : "");
 
-	i2c_gpio_fault_injector_init(pdev);
-
 	return 0;
 }
 
@@ -475,8 +240,6 @@ static int i2c_gpio_remove(struct platform_device *pdev)
 	struct i2c_gpio_private_data *priv;
 	struct i2c_adapter *adap;
 
-	i2c_gpio_fault_injector_exit(pdev);
-
 	priv = platform_get_drvdata(pdev);
 	adap = &priv->adap;
 
