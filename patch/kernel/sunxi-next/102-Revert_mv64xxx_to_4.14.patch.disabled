diff --git a/drivers/i2c/busses/i2c-mv64xxx.c b/drivers/i2c/busses/i2c-mv64xxx.c
index 7332d2b79..b0fb97823 100644
--- a/drivers/i2c/busses/i2c-mv64xxx.c
+++ b/drivers/i2c/busses/i2c-mv64xxx.c
@@ -135,7 +135,6 @@ struct mv64xxx_i2c_data {
 	u32			freq_m;
 	u32			freq_n;
 	struct clk              *clk;
-	struct clk              *reg_clk;
 	wait_queue_head_t	waitq;
 	spinlock_t		lock;
 	struct i2c_msg		*msg;
@@ -534,21 +533,17 @@ static void
 mv64xxx_i2c_wait_for_completion(struct mv64xxx_i2c_data *drv_data)
 {
 	long		time_left;
-	long		flags;
+	unsigned long	flags;
 	char		abort = 0;
 
 	time_left = wait_event_timeout(drv_data->waitq,
 		!drv_data->block, drv_data->adapter.timeout);
-	dev_err(&drv_data->adapter.dev,"mv64xxx: flags = %i\n",flags);
-	dev_err(&drv_data->adapter.dev,"mv64xxx: time_left = %i\n",time_left);
+
 	spin_lock_irqsave(&drv_data->lock, flags);
-	dev_err(&drv_data->adapter.dev,"mv64xxx: flags = %i\n",flags);
 	if (!time_left) { /* Timed out */
-		dev_err(&drv_data->adapter.dev,"mv64xxx: Timedout\n");
 		drv_data->rc = -ETIMEDOUT;
 		abort = 1;
 	} else if (time_left < 0) { /* Interrupted/Error */
-		dev_err(&drv_data->adapter.dev,"mv64xxx: Interrupted/Error\n");
 		drv_data->rc = time_left; /* errno value */
 		abort = 1;
 	}
@@ -556,11 +551,9 @@ mv64xxx_i2c_wait_for_completion(struct mv64xxx_i2c_data *drv_data)
 	if (abort && drv_data->block) {
 		drv_data->aborting = 1;
 		spin_unlock_irqrestore(&drv_data->lock, flags);
-		dev_err(&drv_data->adapter.dev,"mv64xxx: flags = %i\n",flags);
 
 		time_left = wait_event_timeout(drv_data->waitq,
 			!drv_data->block, drv_data->adapter.timeout);
-		dev_err(&drv_data->adapter.dev,"mv64xxx: time_left = %i\n",time_left);
 
 		if ((time_left <= 0) && drv_data->block) {
 			drv_data->state = MV64XXX_I2C_STATE_IDLE;
@@ -580,7 +573,6 @@ mv64xxx_i2c_execute_msg(struct mv64xxx_i2c_data *drv_data, struct i2c_msg *msg,
 {
 	unsigned long	flags;
 
-	dev_err(&drv_data->adapter.dev,"Entered i2c_execute_msg\n");
 	spin_lock_irqsave(&drv_data->lock, flags);
 
 	drv_data->state = MV64XXX_I2C_STATE_WAITING_FOR_START_COND;
@@ -614,7 +606,6 @@ mv64xxx_i2c_offload_xfer(struct mv64xxx_i2c_data *drv_data)
 	unsigned long ctrl_reg;
 	unsigned long flags;
 
-	dev_err(&drv_data->adapter.dev,"Entered i2c_offload_xfer\n");	
 	spin_lock_irqsave(&drv_data->lock, flags);
 
 	/* Build transaction */
@@ -907,20 +898,13 @@ mv64xxx_i2c_probe(struct platform_device *pd)
 	init_waitqueue_head(&drv_data->waitq);
 	spin_lock_init(&drv_data->lock);
 
-	/* Not all platforms have clocks */
+	/* Not all platforms have a clk */
 	drv_data->clk = devm_clk_get(&pd->dev, NULL);
 	if (IS_ERR(drv_data->clk) && PTR_ERR(drv_data->clk) == -EPROBE_DEFER)
 		return -EPROBE_DEFER;
 	if (!IS_ERR(drv_data->clk))
 		clk_prepare_enable(drv_data->clk);
 
-	drv_data->reg_clk = devm_clk_get(&pd->dev, "reg");
-	if (IS_ERR(drv_data->reg_clk) &&
-	    PTR_ERR(drv_data->reg_clk) == -EPROBE_DEFER)
-		return -EPROBE_DEFER;
-	if (!IS_ERR(drv_data->reg_clk))
-		clk_prepare_enable(drv_data->reg_clk);
-
 	drv_data->irq = platform_get_irq(pd, 0);
 
 	if (pdata) {
@@ -970,8 +954,9 @@ mv64xxx_i2c_probe(struct platform_device *pd)
 exit_reset:
 	reset_control_assert(drv_data->rstc);
 exit_clk:
-	clk_disable_unprepare(drv_data->reg_clk);
-	clk_disable_unprepare(drv_data->clk);
+	/* Not all platforms have a clk */
+	if (!IS_ERR(drv_data->clk))
+		clk_disable_unprepare(drv_data->clk);
 
 	return rc;
 }
@@ -984,8 +969,9 @@ mv64xxx_i2c_remove(struct platform_device *dev)
 	i2c_del_adapter(&drv_data->adapter);
 	free_irq(drv_data->irq, drv_data);
 	reset_control_assert(drv_data->rstc);
-	clk_disable_unprepare(drv_data->reg_clk);
-	clk_disable_unprepare(drv_data->clk);
+	/* Not all platforms have a clk */
+	if (!IS_ERR(drv_data->clk))
+		clk_disable_unprepare(drv_data->clk);
 
 	return 0;
 }
